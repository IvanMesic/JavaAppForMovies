package hr.meske.moviemanager;

import hr.meske.dal.ActorRepository;
import hr.meske.dal.DirectorRepository;
import hr.meske.dal.GenreRepository;
import hr.meske.dal.RepoFactory;
import hr.meske.dal.models.Actor;
import hr.meske.dal.models.Director;
import hr.meske.dal.models.Genre;
import hr.meske.dal.models.Movie;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.MOVE;

/**
 *
 * @author 505wL
 */
public class DnDForm extends javax.swing.JFrame {

    private static final DirectorRepository directorRepository = RepoFactory.getDirectorRepository();
    private static final DefaultListModel<String> listActors = new DefaultListModel<>();
    private static final DefaultListModel<String> listDirectors = new DefaultListModel<>();
    private static final DefaultListModel<String> listGenres = new DefaultListModel<>();
    private static final DefaultListModel<String> listAllActors = new DefaultListModel<>();
    private static final DefaultListModel<String> listAllDirectors = new DefaultListModel<>();
    private static final DefaultListModel<String> listAllGenres = new DefaultListModel<>();
    private static final ActorRepository actorRepo = RepoFactory.getActorRepository();
    private static final GenreRepository genreRepo = RepoFactory.getGenreRepository();
    private Movie movie;
    
    /**
     * 
     */
    private MovieReturnListener movieReturnListener;

    public DnDForm(Movie myMovie) throws Exception {
        initComponents();
        movie = myMovie;
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (movieReturnListener != null) {
                    movieReturnListener.onMovieReturn(DnDForm.this.movie);
                }
            }

        });
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        loadData(movie);
        setupDragAndDrop();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlGenre = new javax.swing.JTabbedPane();
        jpDndDirectors = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsMovieDirectors = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsAllDirectors = new javax.swing.JList<>();
        btnSave = new javax.swing.JButton();
        jpGenres = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsMovieGenres = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsAllGenres = new javax.swing.JList<>();
        jpDndActors = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lsMovieActors = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        lsAllActors = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jpDndDirectors.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.setViewportView(lsMovieDirectors);

        jpDndDirectors.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 130, 154));

        jScrollPane3.setViewportView(lsAllDirectors);

        jpDndDirectors.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 130, 154));

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jpDndDirectors.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 70, 117, 64));

        pnlGenre.addTab("Directors", jpDndDirectors);

        jScrollPane4.setViewportView(lsMovieGenres);

        jScrollPane5.setViewportView(lsAllGenres);

        javax.swing.GroupLayout jpGenresLayout = new javax.swing.GroupLayout(jpGenres);
        jpGenres.setLayout(jpGenresLayout);
        jpGenresLayout.setHorizontalGroup(
            jpGenresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpGenresLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jpGenresLayout.setVerticalGroup(
            jpGenresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpGenresLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jpGenresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pnlGenre.addTab("Genre", jpGenres);

        jpDndActors.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane6.setViewportView(lsMovieActors);

        jpDndActors.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 130, 154));

        jScrollPane7.setViewportView(lsAllActors);

        jpDndActors.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 130, 154));

        pnlGenre.addTab("Actor", jpDndActors);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlGenre)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlGenre, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        movie.setActors(getActorsFromList(lsMovieActors));
        movie.setDirectors(getDirectorsFromList(lsMovieDirectors));
        movie.setGenres(getGenresFromList(lsMovieGenres));

        if (movieReturnListener != null) {
            movieReturnListener.onMovieReturn(movie);
        }

        dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    private void setupDragAndDrop() {

        ListTransferHandler listTransferHandler = new ListTransferHandler();

        setUpDirDnD(listTransferHandler);
        setUpActDnD(listTransferHandler);
        setUpGenDnD(listTransferHandler);

    }

    private void loadData(Movie movie) throws Exception {

        loadActors(movie);
        loadDirectors(movie);
        loadGenres(movie);
    }

    private void loadActors(Movie movie) {

        List<Actor> allActors = null;
        try {
            allActors = actorRepo.getAllActors();
        } catch (Exception ex) {
            Logger.getLogger(DnDForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        Optional<List<Actor>> optionalActors = Optional.ofNullable(movie.getActors());

        if (optionalActors.isPresent()) {
            List<Actor> actors = optionalActors.get();
            allActors.removeIf(actor -> actors.contains(actor));
            actors.forEach(a -> listActors.addElement(a.getActorName()));
        }

        allActors.forEach(actor -> {
            listAllActors.addElement(actor.getActorName());
        });

        lsMovieActors.setModel(listActors);
        lsAllActors.setModel(listAllActors);
    }

    private void loadDirectors(Movie movie) throws Exception {

        List<Director> allDirectors = directorRepository.getAllDirectors();

        Optional<List<Director>> optionalDirectors = Optional.ofNullable(movie.getDirectors());

        if (optionalDirectors.isPresent()) {
            List<Director> directors = optionalDirectors.get();
            allDirectors.removeIf(director -> directors.contains(director));
            directors.forEach(d -> listDirectors.addElement(d.getDirectorName()));
        }

        allDirectors.forEach(director -> {
            listAllDirectors.addElement(director.getDirectorName());
        });

        lsMovieDirectors.setModel(listDirectors);
        lsAllDirectors.setModel(listAllDirectors);
    }

    private void loadGenres(Movie movie) {

        List<Genre> allGenres = null;
        try {
            allGenres = genreRepo.getAllGenres();
        } catch (Exception ex) {
            Logger.getLogger(DnDForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        Optional<List<Genre>> optionalGenres = Optional.ofNullable(movie.getGenres());

        if (optionalGenres.isPresent()) {
            List<Genre> genres = optionalGenres.get();
            allGenres.removeIf(genre -> genres.contains(genre));
            genres.forEach(g -> listGenres.addElement(g.getGenreName()));
        }

        allGenres.forEach(genre -> {
            listAllGenres.addElement(genre.getGenreName());
        });

        lsMovieGenres.setModel(listGenres);
        lsAllGenres.setModel(listAllGenres);
    }

    public Movie getMovie() {

        return this.movie;
    }

    public void setOnMovieReturnListener(MovieReturnListener listener) {

        this.movieReturnListener = listener;
    }

    private List<Actor> getActorsFromList(JList<String> list) {
        
        List<Actor> actors = new ArrayList<>();
        DefaultListModel<String> model = (DefaultListModel<String>) list.getModel();
        for (int i = 0; i < model.getSize(); i++) {
            String actorName = model.getElementAt(i);
            Actor actor = new Actor(actorName); 
            actors.add(actor);
        }
        return actors;
    }

    private List<Director> getDirectorsFromList(JList<String> list) {
        
        List<Director> directors = new ArrayList<>();
        DefaultListModel<String> model = (DefaultListModel<String>) list.getModel();
        for (int i = 0; i < model.getSize(); i++) {
            String directorName = model.getElementAt(i);
            Director director = new Director(directorName); 
            directors.add(director);
        }
        return directors;
    }

    private List<Genre> getGenresFromList(JList<String> list) {
        
        List<Genre> genres = new ArrayList<>();
        DefaultListModel<String> model = (DefaultListModel<String>) list.getModel();
        for (int i = 0; i < model.getSize(); i++) {
            String genreName = model.getElementAt(i);
            Genre genre = new Genre(genreName); 
            genres.add(genre);
        }
        return genres;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPanel jpDndActors;
    private javax.swing.JPanel jpDndDirectors;
    private javax.swing.JPanel jpGenres;
    private javax.swing.JList<String> lsAllActors;
    private javax.swing.JList<String> lsAllDirectors;
    private javax.swing.JList<String> lsAllGenres;
    private javax.swing.JList<String> lsMovieActors;
    private javax.swing.JList<String> lsMovieDirectors;
    private javax.swing.JList<String> lsMovieGenres;
    private javax.swing.JTabbedPane pnlGenre;
    // End of variables declaration//GEN-END:variables

    private void setUpDirDnD(ListTransferHandler listTransferHandler) {

        lsMovieDirectors.setDragEnabled(true);
        lsMovieDirectors.setDropMode(DropMode.INSERT);
        lsMovieDirectors.setTransferHandler(listTransferHandler);

        lsAllDirectors.setDragEnabled(true);
        lsAllDirectors.setDropMode(DropMode.INSERT);
        lsAllDirectors.setTransferHandler(listTransferHandler);

    }

    private void setUpActDnD(ListTransferHandler listTransferHandler) {
        
        lsMovieGenres.setDragEnabled(true);
        lsMovieGenres.setDropMode(DropMode.INSERT);
        lsMovieGenres.setTransferHandler(listTransferHandler);

        lsAllGenres.setDragEnabled(true);
        lsAllGenres.setDropMode(DropMode.INSERT);
        lsAllGenres.setTransferHandler(listTransferHandler);

    }

    private void setUpGenDnD(ListTransferHandler listTransferHandler) {
        
        lsMovieActors.setDragEnabled(true);
        lsMovieActors.setDropMode(DropMode.INSERT);
        lsMovieActors.setTransferHandler(listTransferHandler);

        lsAllActors.setDragEnabled(true);
        lsAllActors.setDropMode(DropMode.INSERT);
        lsAllActors.setTransferHandler(listTransferHandler);
    }
}

class ListTransferHandler extends TransferHandler {

    @Override
    public int getSourceActions(JComponent c) {
        
        return MOVE; 
    }

    @Override
    public Transferable createTransferable(JComponent c) {
        
        JList<String> sourceList = (JList<String>) c;
        String selectedString = sourceList.getSelectedValue();
        return new StringSelection(selectedString);
    }

    @Override
    protected void exportDone(JComponent source, Transferable data, int action) {
        
        if (action == MOVE) {
            JList<String> sourceList = (JList<String>) source;
            DefaultListModel<String> listModel = (DefaultListModel<String>) sourceList.getModel();
            String movedString = sourceList.getSelectedValue();
            listModel.removeElement(movedString);
        }
    }

    @Override
    public boolean canImport(TransferHandler.TransferSupport support) {
        
        return support.isDataFlavorSupported(DataFlavor.stringFlavor);
    }

    @Override
    public boolean importData(TransferHandler.TransferSupport support) {
        
        Transferable transferable = support.getTransferable();
        try {
            String data = (String) transferable.getTransferData(DataFlavor.stringFlavor);
            JList<String> targetList = (JList<String>) support.getComponent();
            DefaultListModel<String> listModel = (DefaultListModel<String>) targetList.getModel();
            listModel.addElement(data);
            return true;
        } catch (UnsupportedFlavorException | IOException ex) {
       
        }
        return false;
    }

}

interface MovieReturnListener {

    void onMovieReturn(Movie movie);
}
