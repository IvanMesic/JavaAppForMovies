/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hr.meske.moviemanager;

import hr.meske.dal.ActorRepository;
import hr.meske.dal.DirectorRepository;
import hr.meske.dal.GenreRepository;
import hr.meske.dal.MovieRepository;
import hr.meske.dal.RepoFactory;
import hr.meske.dal.models.Actor;
import hr.meske.dal.models.Director;
import hr.meske.dal.models.DirectoryDeleter;
import hr.meske.dal.models.Movie;
import hr.meske.parser.MyEpicParser;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.stream.XMLStreamException;

/**
 *
 * @author 505wL
 */
public class AdministratorForm extends javax.swing.JFrame {

    private final MovieRepository movieRepository;
    private final DirectorRepository directorRepository;
    private final ActorRepository actorRepository;
    private final GenreRepository genreRepository;
    private List<Movie> movies;

    /**
     * Creates new form UserForm
     */
    public AdministratorForm() {

        initComponents();
        this.movies = new ArrayList<>();
        this.genreRepository = RepoFactory.getGenreRepository();
        this.directorRepository = RepoFactory.getDirectorRepository();
        this.actorRepository = RepoFactory.getActorRepository();
        this.movieRepository = RepoFactory.getMovieRepository();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        btnPullData = new javax.swing.JButton();
        btnDeleteAllData = new javax.swing.JButton();
        myMenu = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnPullData.setText("Pull Data");
        btnPullData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPullDataActionPerformed(evt);
            }
        });

        btnDeleteAllData.setText("DeleteAllData");
        btnDeleteAllData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllDataActionPerformed(evt);
            }
        });

        jMenu3.setText("File");

        jMenuItem1.setText("Logout");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        myMenu.add(jMenu3);

        setJMenuBar(myMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(btnDeleteAllData, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                .addComponent(btnPullData, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPullData, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteAllData, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPullDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPullDataActionPerformed

        new Thread(() -> {
            try {
                movies = MyEpicParser.parse();
            } catch (IOException | XMLStreamException | ParseException ex) {
                Logger.getLogger(AdministratorForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();

        movies.forEach((Movie movie) -> {
            int currentMovieId = movieRepository.createMovie(movie);
            movie.setId(currentMovieId);

            movie.getDirectors().forEach((Director p) -> {
                int currentDirectorId = 0;
                try {
                    currentDirectorId = directorRepository.createDirectorWithMovie(p.getDirectorName(), currentMovieId);
                    p.setId(currentDirectorId);

                } catch (Exception ex) {
                    Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            });

            if (movie.getActors() != null) {

                movie.getActors().forEach((Actor a) -> {
                    int currentActorId = 0;
                    try {
                        currentActorId = actorRepository.createActorWithMovie(a.getActorName(), currentMovieId);
                        a.setId(currentActorId);
                    } catch (Exception e) {
                        Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, e);
                    }
                });
            }

            movie.getGenres().forEach(g
                    -> {
                int currentGenreId = 0;
                try {
                    currentGenreId = genreRepository.createGenreWithMovie(g.getGenreName(), currentMovieId);
                    g.setId(currentGenreId);
                } catch (Exception e) {
                    Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, e);

                }

            });
        });

    }//GEN-LAST:event_btnPullDataActionPerformed

    private void btnDeleteAllDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllDataActionPerformed

        DirectoryDeleter.deleteDirectory();
        movieRepository.deleteAllData();

    }//GEN-LAST:event_btnDeleteAllDataActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        this.dispose();
        LoginForm loginForm = new LoginForm();
        loginForm.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteAllData;
    private javax.swing.JButton btnPullData;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuBar myMenu;
    // End of variables declaration//GEN-END:variables

}
