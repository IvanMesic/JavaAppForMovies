/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hr.meske.moviemanager;

import hr.meske.dal.ActorRepository;
import hr.meske.dal.DirectorRepository;
import hr.meske.dal.GenreRepository;
import hr.meske.dal.MovieRepository;
import hr.meske.dal.RepoFactory;
import hr.meske.dal.models.Movie;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author 505wL
 */
public class EditMovieForm extends javax.swing.JFrame {

    MovieRepository movieRepository = RepoFactory.getMovieRepository();
    GenreRepository genreRepository = RepoFactory.getGenreRepository();
    DirectorRepository directorRepository = RepoFactory.getDirectorRepository();
    ActorRepository actorRepository = RepoFactory.getActorRepository();
    private boolean isSaved = false;
    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
    Movie myMovie;
    UserForm parent;

    /**
     * Creates new form EditMovieForm
     *
     * @param myMovie
     *
     *
     */
    public EditMovieForm(Movie myMovie, UserForm frame) {
        initComponents();
        parent = frame;
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.myMovie = myMovie;
        initListeners();
    }

    private void fillForm(Movie movie) throws IOException, Exception {

        taDesc.setText(movie.getMovieDescription());
        String formattedDate = formatter.format(myMovie.getShowingDate());
        tfShowingDate.setText(formattedDate);
        tfMovieName.setText(movie.getMovieName());
    }

    public void updateActors(int id) {

        movieRepository.deleteAllDataFromMovieActor(myMovie.getId());

        if (myMovie.getActors() != null) {

            myMovie.getActors().forEach(a -> {
                actorRepository.createActorWithMovie(a.getActorName(), myMovie.getId());
            });
        }
    }

    public void updateDirectos(int id) {

        movieRepository.deleteAllDataFromMovieDirector(myMovie.getId());
        if (myMovie.getDirectors() != null) {

            myMovie.getDirectors().forEach(a -> {
                directorRepository.createDirectorWithMovie(a.getDirectorName(), myMovie.getId());
            });
        }
    }

    public void updateGenres(int id) {

        movieRepository.deleteAllDataFromMovieGenre(myMovie.getId());
        if (myMovie.getGenres() != null) {

            myMovie.getGenres().forEach(a -> {
                genreRepository.createGenreWithMovie(a.getGenreName(), myMovie.getId());
            });
        }
    }

    public void updateMovieRelations(int id) {

        updateGenres(id);
        updateActors(id);
        updateDirectos(id);
    }

    public void setMovie(Movie movie) {

        myMovie = movie;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnAdg = new javax.swing.JButton();
        tfShowingDate = new javax.swing.JTextField();
        tfMovieName = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        taDesc = new javax.swing.JTextArea();
        btnSave1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                OnFormOpened(evt);
            }
        });

        jLabel1.setText("MovieName");

        jLabel2.setText("MovieDescription");

        jLabel3.setText("ShowingDate");

        btnAdg.setText("ADG");
        btnAdg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdgActionPerformed(evt);
            }
        });

        taDesc.setColumns(20);
        taDesc.setLineWrap(true);
        taDesc.setRows(5);
        jScrollPane4.setViewportView(taDesc);

        btnSave1.setText("Save");
        btnSave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSave1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave1)
                        .addGap(135, 135, 135)
                        .addComponent(btnAdg))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(tfShowingDate, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfMovieName, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfMovieName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(tfShowingDate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdg, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdgActionPerformed

        setMovieDetailsFromForm();
        try {
            DnDForm dndForm = new DnDForm(myMovie);
            dndForm.setOnMovieReturnListener(this::setMovie);
            dndForm.setVisible(true); // Show the DnDForm
        } catch (Exception ex) {
        }


    }//GEN-LAST:event_btnAdgActionPerformed

    private void OnFormOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_OnFormOpened

        try {
            if (myMovie != null) {

                fillForm(myMovie);
            }
        } catch (Exception ex) {
            Logger.getLogger(EditMovieForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_OnFormOpened

    public void setMovieDetailsFromForm() {

        String movieName = tfMovieName.getText();
        String showingDateStr = tfShowingDate.getText();
        String movieDescription = taDesc.getText();

        Date showingDate = null;
        try {
            showingDate = formatter.parse(showingDateStr);
        } catch (ParseException e) {
        }

        myMovie.setMovieName(movieName);
        myMovie.setShowingDate(showingDate);
        myMovie.setMovieDescription(movieDescription);
    }
    private void btnSave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSave1ActionPerformed

        setMovieDetailsFromForm();
        if (movieRepository.checkIfMovieExists(myMovie.getMovieName())) {

            movieRepository.updateMovie(myMovie);
        } else {
            myMovie.setId(movieRepository.createMovie(myMovie));
        }

        if (rootPaneCheckingEnabled) {

        }
        updateMovieRelations(myMovie.getId());
        isSaved = true;
        checkFields();
        new Thread(() -> {
            parent.getDataFromDatabase();
        }).start();
    }//GEN-LAST:event_btnSave1ActionPerformed
    private final DocumentListener documentListener = new DocumentListener() {

        @Override
        public void insertUpdate(DocumentEvent e) {
            checkFields();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            checkFields();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            checkFields();
        }
    };

    private void checkFields() {

        if (tfMovieName.getText().trim().isEmpty() || !isValidDate(tfShowingDate.getText().trim()) || taDesc.getText().trim().isEmpty()) {

            btnAdg.setEnabled(false);
            btnSave1.setEnabled(false);
        } else {

            btnSave1.setEnabled(true);

            if (isSaved) {
                btnAdg.setEnabled(true);
            }
        }
    }

    private boolean isValidDate(String dateString) {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        sdf.setLenient(false);
        try {
            sdf.parse(dateString);
            return true;
        } catch (ParseException e) {
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdg;
    private javax.swing.JButton btnSave1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea taDesc;
    private javax.swing.JTextField tfMovieName;
    private javax.swing.JTextField tfShowingDate;
    // End of variables declaration//GEN-END:variables

    private void initListeners() {

        tfMovieName.getDocument().addDocumentListener(documentListener);
        tfShowingDate.getDocument().addDocumentListener(documentListener);
        taDesc.getDocument().addDocumentListener(documentListener);
    }

}
